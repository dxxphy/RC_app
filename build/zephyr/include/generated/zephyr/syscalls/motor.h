/* auto-generated by gen_syscalls.py, don't edit */

#ifndef Z_INCLUDE_SYSCALLS_MOTOR_H
#define Z_INCLUDE_SYSCALLS_MOTOR_H


#include <zephyr/tracing/tracing_syscall.h>

#ifndef _ASMLANGUAGE

#include <stdarg.h>

#include <zephyr/syscall_list.h>
#include <zephyr/syscall.h>

#include <zephyr/linker/sections.h>


#ifdef __cplusplus
extern "C" {
#endif

extern int z_impl_motor_get(const struct device * dev, motor_status_t * status);

__pinned_func
static inline int motor_get(const struct device * dev, motor_status_t * status)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; motor_status_t * val; } parm1 = { .val = status };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_MOTOR_GET);
	}
#endif
	compiler_barrier();
	return z_impl_motor_get(dev, status);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define motor_get(dev, status) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_MOTOR_GET, motor_get, dev, status); 	syscall__retval = motor_get(dev, status); 	sys_port_trace_syscall_exit(K_SYSCALL_MOTOR_GET, motor_get, dev, status, syscall__retval); 	syscall__retval; })
#endif
#endif


extern int z_impl_motor_set(const struct device * dev, motor_status_t * status);

__pinned_func
static inline int motor_set(const struct device * dev, motor_status_t * status)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; motor_status_t * val; } parm1 = { .val = status };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_MOTOR_SET);
	}
#endif
	compiler_barrier();
	return z_impl_motor_set(dev, status);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define motor_set(dev, status) ({ 	int syscall__retval; 	sys_port_trace_syscall_enter(K_SYSCALL_MOTOR_SET, motor_set, dev, status); 	syscall__retval = motor_set(dev, status); 	sys_port_trace_syscall_exit(K_SYSCALL_MOTOR_SET, motor_set, dev, status, syscall__retval); 	syscall__retval; })
#endif
#endif


extern void z_impl_motor_control(const struct device * dev, enum motor_cmd cmd);

__pinned_func
static inline void motor_control(const struct device * dev, enum motor_cmd cmd)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; enum motor_cmd val; } parm1 = { .val = cmd };
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_MOTOR_CONTROL);
		return;
	}
#endif
	compiler_barrier();
	z_impl_motor_control(dev, cmd);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define motor_control(dev, cmd) do { 	sys_port_trace_syscall_enter(K_SYSCALL_MOTOR_CONTROL, motor_control, dev, cmd); 	motor_control(dev, cmd); 	sys_port_trace_syscall_exit(K_SYSCALL_MOTOR_CONTROL, motor_control, dev, cmd); } while(false)
#endif
#endif


extern void z_impl_motor_set_mode(const struct device * dev, enum motor_mode mode);

__pinned_func
static inline void motor_set_mode(const struct device * dev, enum motor_mode mode)
{
#ifdef CONFIG_USERSPACE
	if (z_syscall_trap()) {
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		union { uintptr_t x; enum motor_mode val; } parm1 = { .val = mode };
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_MOTOR_SET_MODE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_motor_set_mode(dev, mode);
}

#if defined(CONFIG_TRACING_SYSCALL)
#ifndef DISABLE_SYSCALL_TRACING

#define motor_set_mode(dev, mode) do { 	sys_port_trace_syscall_enter(K_SYSCALL_MOTOR_SET_MODE, motor_set_mode, dev, mode); 	motor_set_mode(dev, mode); 	sys_port_trace_syscall_exit(K_SYSCALL_MOTOR_SET_MODE, motor_set_mode, dev, mode); } while(false)
#endif
#endif


#ifdef __cplusplus
}
#endif

#endif
#endif /* include guard */
